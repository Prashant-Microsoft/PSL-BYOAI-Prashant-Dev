name: CI-Validate Deployment-Research Assistant

on:
  push:
    branches:
      - main
    paths:
      - 'ResearchAssistant/**'
  schedule:
    - cron: '0 6,18 * * *'  # Runs at 6:00 AM and 6:00 PM GMT

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version  # Verify installation

      - name: Login to Azure
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Install Bicep CLI
        run: az bicep install

      - name: Generate Resource Group Name
        id: generate_rg_name
        run: |
          echo "Generating a unique resource group name..."
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          COMMON_PART="pslautomationRes"
          # UNIQUE_RG_NAME="${COMMON_PART}${TIMESTAMP}"
          UNIQUE_RG_NAME="pslautomationRes20241106113537"
          echo "RESOURCE_GROUP_NAME=${UNIQUE_RG_NAME}" >> $GITHUB_ENV
          echo "Generated Resource_GROUP_PREFIX: ${UNIQUE_RG_NAME}" 
      
      # - name: Check and Create Resource Group
      #   id: check_create_rg
      #   run: |
      #     set -e  
      #     echo "Checking if resource group exists..."
      #     rg_exists=$(az group exists --name ${{ env.RESOURCE_GROUP_NAME }})
      #     if [ "$rg_exists" = "false" ]; then
      #       echo "Resource group does not exist. Creating..."
      #       az group create --name ${{ env.RESOURCE_GROUP_NAME }} --location eastus2 || { echo "Error creating resource group"; exit 1; }
      #     else
      #       echo "Resource group already exists."
      #     fi

      # - name: Generate Unique Solution Prefix
      #   id: generate_solution_prefix
      #   run: |
      #     set -e
      #     COMMON_PART="purg"
      #     TIMESTAMP=$(date +%s)  
      #     UPDATED_TIMESTAMP=$(echo $TIMESTAMP | tail -c 3) 
      #     UNIQUE_SOLUTION_PREFIX="${COMMON_PART}${UPDATED_TIMESTAMP}"
      #     echo "SOLUTION_PREFIX=${UNIQUE_SOLUTION_PREFIX}" >> $GITHUB_ENV
      #     echo "Generated SOLUTION_PREFIX: ${UNIQUE_SOLUTION_PREFIX}" 

      # - name: Deploy Bicep Template
      #   id: deploy
      #   run: |
      #     set -e
      #     az deployment group create \
      #       --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
      #       --template-file ResearchAssistant/Deployment/bicep/main.bicep \
      #       --parameters solutionPrefix=${{ env.SOLUTION_PREFIX }}
           
      # - name: List Key Vaults and Store in Array
      #   id: list_keyvaults
      #   run: |
      #     echo "Listing all Key Vaults in the resource group ${RESOURCE_GROUP_NAME}..."
      #     # keyvaults=$(az resource list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "[?type=='Microsoft.KeyVault/vaults'].name" -o tsv)
      #     keyvaults=$(az resource list --resource-group myResourceGroup4 --query "[?type=='Microsoft.KeyVault/vaults'].name" -o tsv)
      #     if [ -z "$keyvaults" ]; then
      #       echo "No Key Vaults found in resource group ${RESOURCE_GROUP_NAME}."
      #       echo "KEYVAULTS=[]" >> $GITHUB_ENV
      #     else
      #       echo "Key Vaults found: $keyvaults"
      #       keyvault_array="[$(echo "$keyvaults" | sed 's/\s\+/,/g')]"
      #       echo "KEYVAULTS=$keyvault_array" >> $GITHUB_ENV
      #     fi

      # - name: List Key Vaults and Store in Array
      #   id: list_keyvaults
      #   run: |
      #     echo "Listing all Key Vaults in the resource group ${RESOURCE_GROUP_NAME}..."
          
      #     # Get the list of Key Vaults in the specified resource group
      #     keyvaults=$(az resource list --resource-group myResourceGroup4 --query "[?type=='Microsoft.KeyVault/vaults'].name" -o tsv)

      #     if [ -z "$keyvaults" ]; then
      #       echo "No Key Vaults found in resource group ${RESOURCE_GROUP_NAME}."
      #       echo "KEYVAULTS=[]" >> $GITHUB_ENV  # If no Key Vaults found, set an empty array
      #     else
      #       echo "Key Vaults found: $keyvaults"

      #       # Format the list into an array with proper formatting (no trailing comma)
      #       keyvault_array="["
      #       first=true
      #       for kv in $keyvaults; do
      #         if [ "$first" = true ]; then
      #           keyvault_array="$keyvault_array\"$kv\""
      #           first=false
      #         else
      #           keyvault_array="$keyvault_array,\"$kv\""
      #         fi
      #       done
      #       keyvault_array="$keyvault_array]"

      #       # Output the formatted array and save it to the environment variable
      #       echo "KEYVAULTS=$keyvault_array" >> $GITHUB_ENV
      #     fi

      # Step 1: List Key Vaults in the Resource Group and Store in Environment Variable
      - name: List Key Vaults in Resource Group
        id: list_keyvaults
        run: |
          echo "Listing all Key Vaults in the resource group ${RESOURCE_GROUP_NAME}..."
          
          # List all Key Vaults in the resource group and store the names in a JSON array
          keyvaults=$(az keyvault list --resource-group myResourceGroup4--query "[].name" -o json)
          
          if [ -z "$keyvaults" ] || [ "$keyvaults" == "[]" ]; then
            echo "No Key Vaults found in resource group ${RESOURCE_GROUP_NAME}."
            echo "KEYVAULTS=[]" >> $GITHUB_ENV  # Store an empty array if no Key Vaults are found
          else
            echo "Key Vaults found: $keyvaults"
            # Store the Key Vaults list as a JSON array in the environment variable
            echo "KEYVAULTS=$keyvaults" >> $GITHUB_ENV
          fi

      # Step 2: Iterate Over Key Vaults (JSON Array Handling)
      - name: Iterate Over Key Vaults
        id: iterate_keyvaults
        run: |
          echo "Using Key Vaults Array..."

          # Get the list of Key Vaults from the environment variable
          KEYVAULTS="${{ env.KEYVAULTS }}"

          if [ "$KEYVAULTS" == "[]" ] || [ -z "$KEYVAULTS" ]; then
            echo "No Key Vaults to process."
          else
            # Iterate over each Key Vault in the JSON array
            # Use jq to parse the JSON array
            for KEYVAULT in $(echo "$KEYVAULTS" | jq -r '.[]'); do
              echo "Processing Key Vault: $KEYVAULT"
              # Add your logic to process each Key Vault here
              # For example, you can delete, purge, or perform other actions on each Key Vault
              # az keyvault purge --name $KEYVAULT --verbose
            done
          fi





          
      # - name: Delete Bicep Deployment
      #   if: success()
      #   run: |
      #     set -e  
      #     echo "Checking if resource group exists..."
      #     rg_exists=$(az group exists --name ${{ env.RESOURCE_GROUP_NAME }})
      #     if [ "$rg_exists" = "true" ]; then
      #       echo "Resource group exist. Cleaning..."
      #       az group delete \
      #           --name ${{ env.RESOURCE_GROUP_NAME }} \
      #           --yes \
      #           --no-wait
      #       echo "Resource group deleted...  ${{ env.RESOURCE_GROUP_NAME }}"
      #     else
      #       echo "Resource group does not exists."
      #     fi

      - name: Purging the Resources
        if: success()
        run: |
          set -e 
          # # Define variables
          # OPENAI_COMMON_PART="purg02-openai"
          # openai_name="${{ env.SOLUTION_PREFIX }}${OPENAI_COMMON_PART}"
          # echo "Azure OpenAI: $openai_name"

          # MULTISERVICE_COMMON_PART="purg02-cogser"
          # multiservice_account_name="${{ env.SOLUTION_PREFIX }}${MULTISERVICE_COMMON_PART}"
          # echo "Azure Multi Service Account: $multiservice_account_name"

          # # Function to handle errors
          # handle_error() {
          #   echo "Error during resource deletion process. Exiting with status code: $1"
          #   exit $1
          # }

          # # Purge OpenAI resource
          # echo "Purging the OpenAI Resource..."
          # if ! az resource delete --ids /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.CognitiveServices/locations/eastus2/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}/deletedAccounts/$openai_name --verbose; then
          #   echo "Failed to purge OpenAI resource: $openai_name"
          #   handle_error 1
          # else
          #   echo "Purged the OpenAI Resource: $openai_name"
          # fi
   
          #  # Purge MultiService account resource
          # echo "Purging the MultiService account Resource..."
          # if ! az resource delete --ids /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.CognitiveServices/locations/eastus2/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}/deletedAccounts/$multiservice_account_name --verbose; then
          #   echo "Failed to purge MultiService account resource: $multiservice_account_name"
          #   handle_error 1
          # else
          #   echo "Purged the MultiService account Resource: $multiservice_account_name"
          # fi

          echo "Using Key Vaults Array..."
          for KEYVAULT in "${KEYVAULTS[@]}"; do
            echo "Processing Key Vault: $KEYVAULT"
            # Add your logic to process each Key Vault here
            # az resource delete --ids /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.CognitiveServices/locations/eastus2/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}/deletedAccounts/$multiservice_account_name --verbose
          done

          echo "Resource purging completed successfully"

      # - name: Send Notification on Failure
      #   if: failure()
      #   run: |
      #     RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      
      #     # Construct the email body
      #     EMAIL_BODY=$(cat <<EOF
      #     {
      #       "body": "<p>Dear Team,</p><p>We would like to inform you that the Research Assistant Automation process has encountered an issue and has failed to complete successfully.</p><p><strong>Build URL:</strong> ${RUN_URL}<br> ${OUTPUT}</p><p>Please investigate the matter at your earliest convenience.</p><p>Best regards,<br>Your Automation Team</p>"
      #     }
      #     EOF
      #     )
      
      #     # Send the notification
      #     curl -X POST "${{ secrets.LOGIC_APP_URL }}" \
      #       -H "Content-Type: application/json" \
      #       -d "$EMAIL_BODY" || echo "Failed to send notification"